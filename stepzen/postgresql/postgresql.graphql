type Comment {
  created_at: DateTime
  id: ID!
  post_id: ID
  text: String
  username: String
}

type Post {
  body: String
  created_at: DateTime
  id: ID!
  image: String
  subreddit_id: ID
  title: String
  username: String
}

type Subreddit {
  created_at: DateTime
  id: ID!
  topic: String
}

type Vote {
  created_at: DateTime
  id: ID!
  post_id: ID
  upvote: Int
  username: String
}

type Query {
  getCommentList: [Comment]
    @dbquery(
      type: "postgresql"
      table: "comment"
      configuration: "postgresql_config"
    )
  """
  This query is an example of how to simply paginate your responses.
  """
  getPaginatedCommentList(first: Int!, after: Int!): [Comment]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "comment" limit $1 offset $2
      """
      configuration: "postgresql_config"
    )
  """
  In this example, a single query parameter is passed. If the request to the DB will
  return at most one value you can remove the square brackets from the result.
  """
  getCommentByPost_id(post_id: ID!): [Comment]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "comment" where "post_id" = $1
      """
      configuration: "postgresql_config"
    )
  """
  In this example, two query parameters are passed. If the request to the DB will
  return at most one value you can remove the square brackets from the result.
  """
  getCommentByPost_idAndUsername(post_id: ID!, username: String!): [Comment]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "comment" where "post_id" = $1 and "username" = $2
      """
      configuration: "postgresql_config"
    )
  getPostList: [Post]
    @dbquery(
      type: "postgresql"
      table: "post"
      configuration: "postgresql_config"
    )
  getSubredditList: [Subreddit]
    @dbquery(
      type: "postgresql"
      table: "subreddit"
      configuration: "postgresql_config"
    )
  getVoteList: [Vote]
    @dbquery(
      type: "postgresql"
      table: "vote"
      configuration: "postgresql_config"
    )
}

type Mutation {
  """
  In this mutation example you can see how to do a mutation to insert data in the database.
  """
  insertPost(
    image: String!
    body: String!
    created_at: DateTime!
    subreddit_id: ID!
    title: String!
    username: String!
  ): Post
    @dbquery(
      type: "postgresql"
      table: "post"
      dml: INSERT
      configuration: "postgresql_config"
    )
  """
  In this mutation example you can see how to do a mutation to delete data from the database.
  """
  deletePost(
    image: String!
    id: ID!
    body: String!
    created_at: DateTime!
    subreddit_id: ID!
    title: String!
    username: String!
  ): Post
    @dbquery(
      type: "postgresql"
      table: "post"
      dml: DELETE
      configuration: "postgresql_config"
    )
}
